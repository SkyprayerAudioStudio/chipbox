apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def getVersionCode = { ->
    def proc = Runtime.getRuntime().exec("git rev-list --all --count")

    def result = proc.waitFor()
    if (result != 0) {
        return 1 // no git revisions
    }

    return proc.getInputStream().readLines().get(0).toInteger()
}

def getVersionName = { ->
    def proc = Runtime.getRuntime().exec("git describe --tags --dirty")

    def result = proc.waitFor()
    if (result != 0) {
        return "git-error"
    }

    return proc.getInputStream().readLines().get(0)
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "net.sigmabeta.chipbox"

        minSdkVersion 21
        targetSdkVersion 21

        versionCode getVersionCode()
        versionName getVersionName()
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            // TODO If this is ever modified, change application_id in debug/strings.xml
            applicationIdSuffix ".debug"
            versionNameSuffix '-debug'
            jniDebuggable true
        }
    }

    tasks.withType(JavaCompile) { compileTask ->
        compileTask.dependsOn(compileNative)
    }

    productFlavors {
        arm {
            flavorDimension "abi"
            ndk {
                abiFilter "armeabi-v7a"
            }
        }

        x86 {
            flavorDimension "abi"
            ndk {
                abiFilter "x86"
            }
        }

        arm_64 {
            flavorDimension "abi"
            ndk {
                abiFilter "arm64-v8a"
            }
        }

        x86_64 {
            flavorDimension "abi"
            ndk {
                abiFilter "x86_64"
            }
        }
    }
}

dependencies {
    // Contains Lollipop UI View backports.
    compile 'com.android.support:appcompat-v7:23.4.0'

    // RecyclerView backports.
    compile 'com.android.support:recyclerview-v7:23.4.0'

    // Contains new Material Design views. Automatically includes support-v4
    compile 'com.android.support:design:23.4.0'

    // Enable RxJava-style asynrchronous calls
    compile 'io.reactivex:rxandroid:1.2.0'

    // Display images loaded from storage.
    compile 'com.squareup.picasso:picasso:2.5.2'

    // Contains the Kotlin Standard Library
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Copy album art more easily.
    compile 'commons-io:commons-io:2.4'

    // Annotation-processing based DB codegen.
    kapt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
    compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
    compile "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"

    // Dependency Injection.
    compile "com.google.dagger:dagger:${dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${dagger_version}"
    provided 'org.glassfish:javax.annotation:10.0-b28'
}

buildscript {
    ext.kotlin_version = '1.0.2'
    ext.dbflow_version = "3.0.0-beta6"
    ext.dagger_version = "2.2"

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

kapt {
    generateStubs = true
}

task setupCMake(type: Exec) {
    // Check if a build properties file exists.
    def propsFile = rootProject.file("build.properties")

    // If it does, call CMake.
    if (propsFile.canRead()) {
        // Read the properties file's contents.
        def buildProperties = new Properties()
        buildProperties.load(new FileInputStream(propsFile))

        String abi = getAbi()

        mkdir('build/' + abi)
        workingDir 'build/' + abi

        executable getExecutablePath("cmake")

        args "-DANDROID=true",
                "-DANDROID_NATIVE_API_LEVEL=android-21",
                "-DCMAKE_TOOLCHAIN_FILE=../../../android.toolchain.cmake",
                "../../src/main/cpp/",
                "-DGIT_EXECUTABLE=" + getExecutablePath("git"),
                "-DANDROID_NDK=" + getNdkPath(),
                "-DANDROID_TOOLCHAIN_NAME=" + getToolchainName(),
                "-DANDROID_ABI=" + abi
    } else {
        executable 'echo'
        args 'No build.properties found; skipping CMake.'
    }
}

task compileNative(type: Exec, dependsOn: 'setupCMake') {
    // Check if a build properties file exists.
    def propsFile = rootProject.file("build.properties")

    // If it does, call make.
    if (propsFile.canRead()) {
        // Read the properties file's contents.
        def buildProperties = new Properties()
        buildProperties.load(new FileInputStream(propsFile))

        String abi = getAbi()

        workingDir 'build/' + abi

        executable 'make'

        if (buildProperties.makeArgs == null || buildProperties.makeArgs.isEmpty()) {
            // TODO
        } else {
            args buildProperties.makeArgs
        }
    } else {
        executable 'echo'
        args 'No build.properties found; skipping native build.'
    }
}

/*task copyNative(type: Exec, dependsOn: 'compileNative') {
    // Check if a build properties file exists.
    def propsFile = rootProject.file("build.properties")

    // If it does, copy native libs into jniLibs.
    if (propsFile.canRead()) {
        // Read the properties file's contents.
        def buildProperties = new Properties()
        buildProperties.load(new FileInputStream(propsFile))

        String abi = getAbi()

        workingDir 'build/' + abi

        executable 'mv'

        args "../../libs*//*", "../../.."
    } else {
        executable 'echo'
        args 'No build.properties found; skipping native build.'
    }
}*/

String getExecutablePath(String command) {
    def propsFile = rootProject.file("build.properties")
    def path = null

    if (propsFile.canRead()) {
        def buildProperties = new Properties()
        buildProperties.load(new FileInputStream(propsFile))
        println buildProperties
        path = buildProperties[command + "Path"]
    }

    if (path == null || path.isEmpty()) {
        try {
            def stdout = new ByteArrayOutputStream()

            exec {
                commandLine 'which', command
                standardOutput = stdout
            }

            path = stdout.toString().trim()
        } catch (ignored) {
            project.logger.error("Gradle error: Couldn't find " + command + " executable.")
        }
    }

    if (path != null) {
        project.logger.quiet("Gradle: Found " + command + " executuable:" + path)
    }

    return path
}

String getNdkPath() {
    def propsFile = rootProject.file("build.properties")
    def ndkPath = null

    if (propsFile.canRead()) {
        def buildProperties = new Properties()
        buildProperties.load(new FileInputStream(propsFile))
        ndkPath = buildProperties.ndkPath
    }

    if (ndkPath == null || ndkPath.isEmpty()) {
        try {
            def stdout = new ByteArrayOutputStream()

            exec {
                // ndk-build.cmd is a file unique to the root directory of android-ndk-r10e.
                commandLine 'locate', 'ndk-build.cmd'
                standardOutput = stdout
            }

            def ndkCmdPath = stdout.toString()
            ndkPath = ndkCmdPath.substring(0, ndkCmdPath.lastIndexOf('/'))
        } catch (ignored) {
            project.logger.error("Gradle error: Couldn't find NDK.")
        }
    }

    if (ndkPath != null) {
        project.logger.quiet("Gradle: Found Android NDK: " + ndkPath)
    }
    return ndkPath
}

String getAbi() {
    String taskName = getGradle().startParameter.taskNames[0]
    String abi;

    if (taskName == null) {
        return ""
    }

    project.logger.quiet("Gradle: Build = " + taskName)

    if (taskName.contains("Arm_64")) {
        abi = "arm64-v8a"
    } else if (taskName.contains("Arm")) {
        abi = "armeabi-v7a"
    } else if (taskName.contains("X86_64")) {
        abi = "x86_64"
    }

    project.logger.quiet("Gradle: ABI name: " + abi)
    return abi;
}

String getToolchainName() {
    String taskName = getGradle().startParameter.taskNames[0]
    String toolchain;

    if (taskName == null) {
        return ""
    }

    if (taskName.contains("Arm_64")) {
        toolchain = "aarch64-linux-android-4.9"
    } else if (taskName.contains("Arm")) {
        toolchain = "arm-linux-androideabi-4.9"
    } else if (taskName.contains("X86_64")) {
        toolchain = "x86_64-4.9"
    }

    project.logger.quiet("Gradle: ABI name: " + toolchain)
    return toolchain;
}