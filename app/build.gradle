apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'


def getVersionCode = { ->
    def proc = Runtime.getRuntime().exec("git rev-list --all --count")

    def result = proc.waitFor()
    if (result != 0) {
        return 1 // no git revisions
    }

    // Add a million because of previous versionCode problems.
    // Multiply by 10 so LSB can represent build type.
    return (proc.getInputStream().readLines().get(0).toInteger() * 10 ) + 1000000
}

def getVersionName = { ->
    def proc = Runtime.getRuntime().exec("git describe --tags")

    def result = proc.waitFor()
    if (result != 0) {
        return "git-error"
    }

    return proc.getInputStream().readLines().get(0)
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "net.sigmabeta.chipbox"

        minSdkVersion 21
        targetSdkVersion 25

        versionName getVersionName()

        // This block is different from the one you use to link Gradle to your CMake build script.
        externalNativeBuild {
            cmake {
                // Use the following syntax when passing arguments to variables:
                // arguments "-DVAR_NAME=VALUE"
                arguments "-DANDROID=true",
                        "-DANDROID_NATIVE_API_LEVEL=android-21"
            }
        }
    }

    // Use this block to link Gradle to your CMake build script.
    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    signingConfigs {
        release {
            storeFile file("chipbox.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-debug'
            jniDebuggable true
        }
    }

    productFlavors {
        arm {
            versionCode getVersionCode() + 1

            ndk {
                abiFilter "armeabi-v7a"
            }
        }

        x86 {
            versionCode getVersionCode() + 3

            ndk {
                abiFilter "x86"
            }
        }

        arm_64 {
            versionCode getVersionCode() + 5

            ndk {
                abiFilter "arm64-v8a"
            }
        }

        x86_64 {
            versionCode getVersionCode() + 7

            ndk {
                abiFilter "x86_64"
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    // Contains Lollipop UI View backports.
    compile "com.android.support:appcompat-v7:$support_lib_version"

    // RecyclerView backports.
    compile "com.android.support:recyclerview-v7:$support_lib_version"

    // Contains new Material Design views. Automatically includes support-v4
    compile "com.android.support:design:$support_lib_version"

    // Enable RxJava-style asynrchronous calls
    compile 'io.reactivex:rxandroid:1.2.0'

    // Display images loaded from storage.
    compile 'com.squareup.picasso:picasso:2.5.2'

    // Contains the Kotlin Standard Library
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Copy album art more easily.
    compile 'commons-io:commons-io:2.4'

    // Crash Reporting
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    // Dependency Injection.
    compile "com.google.dagger:dagger:${dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${dagger_version}"
    provided 'org.glassfish:javax.annotation:10.0-b28'
}

kapt {
    generateStubs = true
}